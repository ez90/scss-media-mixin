// -----------------------------------------------------------------------------
// Media query Sass mixins
// Strongly inspired by of https://include-media.com/
// -----------------------------------------------------------------------------

// List of breakpoints
$breakpoints: (
        'xs': 480px,
        'sm': 768px,
        'md': 992px,
        'lg': 1200px
) !default;

// List of media expressions
$media-expressions: (
        'screen': 'screen',
        'print': 'print',
        'handheld': 'handheld',
        'landscape': '(orientation: landscape)',
        'portrait': '(orientation: portrait)',
        'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',
        'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'
) !default;

// -----------------------------------------------------------------------------
// Parser functions
// -----------------------------------------------------------------------------

// Find opererator if exist
//
// @param {String} $expression - Expression to extract operator from
//
// @return {String}
@function get-expression-operator($expression) {
    @each $operator in ('>=', '>', '<=', '<') {
        @if str-index($expression, $operator) {
            @return $operator;
        }
    }
}

// Transform in media query language
//
// @param {String} $expression - Expression to extract operator from
//
// @return {String}
@function get-expression-prefix($operator) {
    @return if(index(('<', '<='), $operator), 'max', 'min');
}

// Get dimenssion (default is 'width')
//
// @param {String} $expression - Expression to extract operator from
// @param {String} $operator - Operator from `$expression`
//
// @return {String}
@function get-expression-dimension($expression, $operator) {

    // Define default dimension
    $dimension: 'width';

    // Find operator position
    $operator-index: str-index($expression, $operator);

    // Extract dimension before operator position
    $parsed-dimension: str-slice($expression, 0, $operator-index - 1);

    // Redefined dimmension if needed
    @if str-length($parsed-dimension) > 0 {
        $dimension: $parsed-dimension;
    }

    @return $dimension;
}

// Get value of expression
//
// @param {String} $expression - Expression to extract operator from
// @param {String} $operator - Operator from `$expression`
//
// @return {String}
@function get-expression-value($expression, $operator) {

    // Find operator position
    $operator-index: str-index($expression, $operator);

    // Extract value after operator position
    $value: str-slice($expression, $operator-index + str-length($operator));

    // Convert value to number if it's custom values
    // else use breakpoints list to get value
    @if map-has-key($breakpoints, $value) {
        $value: map-get($breakpoints, $value);
    } @else {
        $value: to-number($value);
    }

    // Add/remove interval
    @if $operator == '>' {
        $value: $value + 1;
    } @else if $operator == '<' {
        $value: $value - 1;
    }

    @return $value;
}

// Parse expression to build media querie expression
//
// @param {String} $expression - Expression to extract operator from
//
// @return {String}
@function parse-expression($expression) {

    // If expression is defined in $media-expressions, return it
    @if map-has-key($media-expressions, $expression) {
        @return map-get($media-expressions, $expression);
    }

    // Else compute the expression
    $operator: get-expression-operator($expression);
    $dimension: get-expression-dimension($expression, $operator);
    $prefix: get-expression-prefix($operator);
    $value: get-expression-value($expression, $operator);

    @return '(#{$prefix}-#{$dimension}: #{$value})';
}

// -----------------------------------------------------------------------------
// Utils fonctions
// -----------------------------------------------------------------------------

//
// Casts a string into a number
//
// @param {String | Number} $value - Value to be parsed
//
// @return {Number}
//
@function to-number($value) {
    @if type-of($value) == 'number' {
        @return $value;
    } @else if type-of($value) != 'string' {
        @return ()
    }

    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

    @for $i from if($minus, 2, 1) through str-length($value) {
        $character: str-slice($value, $i, $i);

        @if not (index(map-keys($numbers), $character) or $character == '.') {
            @return to-length(if($minus, -$result, $result), str-slice($value, $i))
        }

        @if $character == '.' {
            $digits: 1;
        } @else if $digits == 0 {
            $result: $result * 10 + map-get($numbers, $character);
        } @else {
            $digits: $digits * 10;
            $result: $result + map-get($numbers, $character) / $digits;
        }
    }

    @return if($minus, -$result, $result);
}

//
// Add `$unit` to `$value`
//
// @param {Number} $value - Value to add unit to
// @param {String} $unit - String representation of the unit
//
// @return {Number} - `$value` expressed in `$unit`
//
@function to-length($value, $unit) {
    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

    @return $value * map-get($units, $unit);
}

//
// Slice `$list` between `$start` and `$end` indexes
//
//
// @param {List} $list - List to slice
// @param {Number} $start [1] - Start index
// @param {Number} $end [length($list)] - End index
//
// @return {List} Sliced list
//
@function slice($list, $start: 1, $end: length($list)) {
    @if length($list) < 1 or $start > $end {
        @return ();
    }

    $result: ();

    @for $i from $start through $end {
        $result: append($result, nth($list, $i));
    }

    @return $result;
}

// -----------------------------------------------------------------------------
// Mixin
// -----------------------------------------------------------------------------

@mixin media($conditions...) {
    @if (length($conditions) == 0) {
        @content;
    } @else if (length($conditions) > 0) {
        // Write first condition
        @media #{unquote(parse-expression(nth($conditions, 1)))} {
            // Recursive call, handle the rest of conditions
            @include media(slice($conditions, 2)
            ...) {
                @content;
            }
        }
    }
}
